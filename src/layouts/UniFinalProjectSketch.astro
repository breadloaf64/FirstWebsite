---
import '../styles/squareSketches.css'

interface Props {
	title: string
}

const { title } = Astro.props
---

<html>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/uke-icon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<!-- Bootstrap -->
		<link
			rel="stylesheet"
			href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
			integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
			crossorigin="anonymous"
		/>

		<!-- Sketch -->
		<script is:inline src="Main.js" type="text/javascript"></script>
		<script is:inline src="Styling.js" type="text/javascript"></script>
		<script is:inline src="Sound.js" type="text/javascript"></script>
		<script is:inline src="Drawing.js" type="text/javascript"></script>
		<script is:inline src="Button.js" type="text/javascript"></script>

		<!-- P5js -->
		<script
			is:inline
			src="https://cdn.jsdelivr.net/npm/p5@v1.3.1/lib/p5.js"
			type="text/javascript"></script>
		<script
			is:inline
			src="https://cdn.jsdelivr.net/npm/p5@vv1.4.0/lib/addons/p5.sound.min.js"
			type="text/javascript"></script>

		<!-- Don't forget this one if using sound! -->
		<script
			is:inline
			src="https://unpkg.com/@free-side/audioworklet-polyfill/dist/audioworklet-polyfill.js"
			type="text/javascript"></script>
	</head>
	<body>
		<!-- sketch holder -->
		<div class="square-box">
			<div id="sketch-holder" class="square-content">
				<!-- Our sketch will go here! -->
			</div>
		</div>

		<div class="container">
			<div class="col-sm">
				<!-- sketch title and description -->
				<h1 class="sketch-title">{title}</h1>
				<p class="sketch-desc">
					Use your mouse or finger to change the pitch and volume.
				</p>

				<!-- Sketch info -->
				<p>
					Starting off, I found the simplest way to generate sound in a sketch,
					which is by playing a sample. By loading in a sample of a sine wave, I
					could then use the mouse's x and y positions to influence the pitch
					and volume!
				</p>
				<p>
					Simply setting the pitch required more thought than anticipated. You
					see, we can only use the p5.js function sample.rate(s), which causes
					the sample to be played back at s times the regular speed. To find the
					frequency of the resultant wave, we must multiply this rate by the
					frequency of our wave sample (sf) which is 1000Hz in this case. Thus,
					to play a desired frequency f we must set the rate to f/sf.
				</p>
				<p>
					A final nuance to mention: the map from x position to frequency is
					linear. However, there is an exponential relationship between
					frequency and pitch; doubling a frequency always increases the pitch
					by an octave! Explore this listening to a small frequency change at a
					low frequency, vs the same change at a high frequency.
				</p>
			</div>
		</div>
	</body>
</html>
