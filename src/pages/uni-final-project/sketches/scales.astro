---
import UniFinalProjectSketch from '../../../layouts/UniFinalProjectSketch.astro'

const sketchScriptSRCs = [
	'Main.js',
	'Styling.js',
	'Sound.js',
	'Drawing.js',
	'Button.js',
	'Scale.js',
	'WebsiteMobileSetup.js',
	'RectToggleButton.js',
	'RectToggleButtonArray.js',
]
---

<UniFinalProjectSketch
	title="Scales"
	description="Tap the buttons to define the scale. Move your mouse/finger to control the note."
>
	{
		sketchScriptSRCs.map((sketchScriptSrc) => (
			<script
				slot="scripts"
				is:inline
				src={sketchScriptSrc}
				type="text/javascript"
			/>
		))
	}
	<section>
		<p>
			The focus behind this sketch was pitch quantisation. That is, how can we
			map the continuous spectrum of pitch onto a discrete musical scale? This
			will become important if we want to use the final program to come up with
			harmonious melodies.
		</p>
		<p>
			To make this work, I first came up with a way to index notes. By
			convention we start with
			<a href="https://en.wikipedia.org/wiki/A440_(pitch_standard)"
				>A4 (440hz)</a
			>
			to which we assign index 0. Then the semitone up has index 1, the next index
			2 and so on. In the same way, the semitone below has index -1 etc. So each
			musical note is given an integer.
		</p>
		<p>
			The second part of the puzzle is a continuous bijection between
			frequencies and notes (including the real numbers between note indices).
			There are many ways to do this, but the one I chose is based on
			<a href="https://en.wikipedia.org/wiki/12_equal_temperament"
				>12-tone equal temperament (12-TET)</a
			>. You can spend hours in the music theory rabbit hole of why this works,
			but here's the function \(f\) which maps note index \(n\) to its
			frequency:
			<!-- \(f(n)=440\cdot2^{n / 12}\). -->
		</p>
		<p>
			Altogether, to quantise a frequency \(x\) to the chromatic scale, apply
			the inverse of the above \(f^{-1}(x)\) to get the real-valued unquantised
			note index. Round it to the nearest note index, then apply f again to get
			the quantised frequency. \[quantise(x) = f(round(f^{-1}(x)))\]
		</p>
		<p>
			Finally, in order to quantise to a scale I created a Scale class. It takes
			a tonic (root note of the scale) and a set of notes in one octave relative
			to that tonic and generates an array of all the notes in the scale across
			all octaves in the
			<a href="https://en.wikipedia.org/wiki/Hearing_range">audible range</a>.
			We can then use binary search to get the nearest note in the scale to a
			given note!
		</p>
	</section>
</UniFinalProjectSketch>
